import { Bot, webhookCallback } from "grammy";
import { welcomeText } from "./modules/constText.js";
import { menu } from "./modules/menu.js";

const bot = new Bot(BOT_TOKEN, { botInfo: BOT_INFO });

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserData {
    id: number;
    first_name: string;
    last_name?: string;
    username?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
interface StorageData {
    users: { [key: string]: UserData };
    totalCount: number;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const storage = freeStorage<StorageData>(bot.token);

bot.api.setMyCommands([
  { command: "start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç" },
  { command: "menu", description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
]);

// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {


    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const data = await storage.read() || { users: {}, totalCount: 0 };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!data.users[userId]) {
        data.users[userId] = {
            id: userId,
            first_name: ctx.from.first_name,
            last_name: ctx.from.last_name,
            username: ctx.from.username
        };
        data.totalCount += 1;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await storage.write(data);
    }

  await ctx.reply( `<b>${ctx.from?.first_name}</b>` + welcomeText, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é root-menu
bot.use(menu);

bot.command("menu", async (ctx) => {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é.
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:", { reply_markup: menu });
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stat
bot.command('stat', async (ctx) => {
    try {
        const data = await storage.read();
        
        if (!data || data.totalCount === 0) {
            await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        await ctx.reply(
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.totalCount}\n\n` +
            `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:\n` +
            Object.values(data.users)
                .slice(-5)
                .map(u => `‚Ä¢ ${u.first_name}${u.username ? ` (@${u.username})` : ''}`)
                .join('\n')
        );
    } catch (error) {
        console.error('Error reading storage:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

addEventListener("fetch", webhookCallback(bot, "cloudflare"));
