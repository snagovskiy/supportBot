import { Bot, webhookCallback } from "grammy";
import { welcomeText } from "./modules/constText.js";
import { menu } from "./modules/menu.js";

const bot = new Bot(BOT_TOKEN, { botInfo: BOT_INFO });

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞
bot.api.setMyCommands([
  { command: "start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç" },
  { command: "menu", description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
  { command: "stat", description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" },
]);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ KV
async function getKVData() {
  try {
    const data = await BOT_STORAGE.get("user_data");
    return data ? JSON.parse(data) : { users: {}, totalCount: 0 };
  } catch (error) {
    console.error("Error getting data from KV:", error);
    return { users: {}, totalCount: 0 };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ KV
async function putKVData(data) {
  try {
    await BOT_STORAGE.put("user_data", JSON.stringify(data));
    return true;
  } catch (error) {
    console.error("Error putting data to KV:", error);
    return false;
  }
}

// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {
  const userId = ctx.from?.id;
  
  if (userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ KV
      const userData = await getKVData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      if (!userData.users[userId]) {
        userData.users[userId] = {
          id: userId,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name || "",
          username: ctx.from.username || "",
          joined: new Date().toISOString()
        };
        userData.totalCount += 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const success = await putKVData(userData);
        if (!success) {
          console.error("Failed to save user data to KV");
        }
      }
    } catch (error) {
      console.error("Error in start command:", error);
    }
  }
  
  await ctx.reply(`<b>${ctx.from?.first_name}</b>` + welcomeText, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command("stat", async (ctx) => {
  try {
    const userData = await getKVData();
    
    if (!userData || userData.totalCount === 0) {
      await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const usersArray = Object.values(userData.users);
    usersArray.sort((a, b) => new Date(b.joined) - new Date(a.joined));
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const lastUsers = usersArray.slice(0, 5);

    await ctx.reply(
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${userData.totalCount}</b>\n\n` +
      `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:</b>\n` +
      lastUsers.map(u => `‚Ä¢ ${u.first_name}${u.last_name ? ` ${u.last_name}` : ''}${u.username ? ` (@${u.username})` : ''}`).join('\n'),
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.error('Error in stat command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é root-menu
bot.use(menu);

bot.command("menu", async (ctx) => {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é.
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:", { reply_markup: menu });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error('Error in bot:', err);
});

addEventListener("fetch", webhookCallback(bot, "cloudflare"));
